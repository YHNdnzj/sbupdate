#!/bin/bash

declare -r _f_config=%CONFIG%
declare -r _f_functions=functions

shopt -s extglob

_f_key='' _f_cert=''
_f_efi='' _f_dest=''
_f_initramfs=''
_d_boot='' _d_uki=''

_efitype=''
_kernel='' _uki=''
_cmdline=''
_fallback=0
_ukify=()

BACKUP=0
CMDLINE_DEFAULT='' CMDLINE_ALWAYS=''
UKI_SUFFIX=''
MICROCODES=()

UKIFY_EXTRA=()
declare -A EXTRA_SIGN

get_kernel() {
    local file kernel

    file="${1##*/}"

    for kernel in "${file#vmlinuz-}" "$file"; do
        if in_array "$kernel" "${KERNELS[@]}"; then
            printf '%s' "$kernel"
            return 0
        fi
    done

    return 1
}

enable_extra_sign() {
    local quiet="$1" _systemctl=()
    local system_state systemd_running=1
    local file escaped unit
    local to_enable=() to_start=()

    if (( SBUPDATE_EXTRA_SIGN )); then
        return 0
    fi

    if ! system_state="$(systemctl is-system-running)" && ! in_array "$system_state" "starting" "degraded"; then
        systemd_running=0
    fi

    _systemctl=(systemctl)
    if [[ "$quiet" ]]; then
        _systemctl+=("$quiet")
    fi

    if (( ${#EXTRA_SIGN[@]} == 0 )); then
        "${_systemctl[@]}" disable "sbupdate@.path"

        if (( systemd_running )); then
            "${_systemctl[@]}" stop "sbupdate@*.path"
        fi

        return
    fi

    for file in "${!EXTRA_SIGN[@]}"; do
        escaped="$(systemd-escape --path "$file")"
        to_enable+=("sbupdate@${escaped}.path")

        if [[ ! -e "${EXTRA_SIGN["$file"]}" ]]; then
            to_start+=("sbupdate@${escaped}.service")
        fi
    done

    if (( systemd_running )); then
        while read -r unit _; do
            if ! in_array "$unit" "${to_enable[@]}"; then
                "${_systemctl[@]}" disable --now "$unit"
            fi
        done < <(systemctl list-units --quiet --plain --all "sbupdate@*.path")
    fi

    "${_systemctl[@]}" enable "${to_enable[@]}"
    if (( systemd_running )); then
        "${_systemctl[@]}" start "${to_enable[@]}"
    fi

    if (( ${#to_start[@]} > 0 && systemd_running )); then
        "${_systemctl[@]}" start --no-block "${to_start[@]}"
    fi
}

str_normalize() {
    local str="$*"
    str="$(printf '%s' "${str##+([[:space:]])}")"
    printf '%s' "${str%%+([[:space:]])}"
}

strnull() {
    if [[ "${*// }" ]]; then
        printf '%s' "$*"
    else
        printf '(null)'
    fi
}

cleanup() {
    exit "$1"
}

# shellcheck disable=SC1090
. "$_f_functions"

if [[ -t 1 ]]; then
    try_enable_color
else
    for __color in none bold green blue red yellow; do
        declare -r "_color_${__color}"=''
    done
fi

# shellcheck disable=SC1091,SC2016 source=sbupdate.conf
. <(sed '/^KERNELS=/a declare -A "${KERNELS[@]//-/_}"' "$_f_config") || die "Failed to read config file '%s'" "$_f_config"

[[ -d "$KEY_DIR" ]] || die "KEY_DIR '%s' doesn't exist or isn't a directory" "$KEY_DIR"

_f_key="$KEY_DIR/DB.key" _f_cert="$KEY_DIR/DB.crt"
[[ -f "$_f_key" && -f "$_f_cert" ]] || die "Cannot find Secure Boot key (DB.key) or cert (DB.crt) under KEY_DIR"

if [[ "$1" ]]; then
    enable_extra_sign --quiet
else
    if [[ -v KERNELDESTINATION ]]; then
        # mkinitcpio is invoked without specifying kernel. Let's quit early.
        exit 0
    fi

    # We're invoked directly by user
    enable_extra_sign
    exit
fi

_f_efi="$1"
[[ -f "$_f_efi" ]] || die "EFI binary '%s' doesn't exist" "$_f_efi"

_efitype="$(bootctl kernel-identify "$_f_efi" 2>/dev/null)"
[[ "$_efitype" == "pe" ]] || die "'%s' isn't a valid EFI binary" "$_f_efi"

if (( SBUPDATE_EXTRA_SIGN )); then
    _f_dest="${EXTRA_SIGN["$_f_efi"]}"
    if [[ ! "$_f_dest" ]]; then
        die "Requested for EXTRA_SIGN but file '%s' isn't listed" "$_f_efi"
    fi

    exec sbsign --key "$_f_key" --cert "$_f_cert" --output "$_f_dest" "$_f_efi"
fi

_d_boot="$(bootctl --print-boot-path 2>/dev/null)"
[[ -d "$_d_boot" ]] || die "Failed to locate ESP or XBOOTLDR"

_kernel="$(get_kernel "$_f_efi")"
if [[ ! "$_kernel" ]]; then
    msg "Kernel '%s' isn't configured, ignoring" "$_f_efi"
    exit 0
fi
_f_initramfs="$2"

set -eu

declare -n _config="${_kernel//-/_}"

if [[ "$_f_initramfs" == *-fallback.img ]]; then
    _fallback=1
fi

if (( ! _fallback )); then
    if [[ -v "_config[uki]" ]]; then
        _uki="${_config[uki]}"
    else
        _uki="${_kernel#vmlinuz-}${UKI_SUFFIX}"
    fi
else
    if [[ -v "_config[uki-fallback]" ]]; then
        _uki="${_config[uki-fallback]}"
    fi
fi
if [[ ! "$_uki" ]]; then
    if (( _fallback )); then
        exit 0
    fi

    die "Kernel '%s' has an empty 'uki' setting" "$_kernel"
fi
if [[ "$_uki" != *.efi ]]; then
    _uki+=".efi"
fi

if [[ -v "_config[cmdline]" ]]; then
    _cmdline="${_config[cmdline]} $CMDLINE_ALWAYS"
else
    _cmdline="$CMDLINE_DEFAULT $CMDLINE_ALWAYS"
fi
_cmdline="$(str_normalize "$_cmdline")"

_d_uki="$_d_boot/$UKI_DIR"
mkdir -p "$_d_uki"
_f_dest="$(realpath "$_d_uki/$_uki")"

if [[ -f "$_f_dest" ]] && (( BACKUP )); then
    mv --force --no-copy "$_f_dest" "${_f_dest}.bak" || msg "Failed to backup the old UKI, ignoring: %s" "$_f_dest"
fi

msg "Generating signed UKI '%s'" "$_f_dest"
msg2 "Kernel: %s (%s) - %s" "$_kernel" "$KERNELVERSION" "$_f_efi"
msg2 "Microcode(s): %s" "$(strnull "${MICROCODES[*]}")"
msg2 "Initramfs: %s" "$_f_initramfs"
msg2 "Cmdline: %s" "$(strnull "$_cmdline")"

_ukify=(ukify build --linux="$_f_efi" --cmdline="$_cmdline" --uname="$KERNELVERSION"
        --secureboot-private-key="$_f_key" --secureboot-certificate="$_f_cert" --signtool=sbsign
        --output="$_f_dest")

for __initrd in "${MICROCODES[@]}" "$_f_initramfs"; do
    _ukify+=(--initrd="$__initrd")
done

if [[ -v SPLASH ]]; then
    if [[ -f "$SPLASH" ]]; then
        msg2 "Splash: %s" "$SPLASH"
        _ukify+=(--splash="$SPLASH")
    else
        warning "Cannot find splash file '%s', ignoring" "$SPLASH"
    fi
fi

exec "${_ukify[@]}" "${UKIFY_EXTRA[@]}"
